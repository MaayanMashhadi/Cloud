name: assignment3
on: 
  push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: create log file
      run: |
        echo $(date -Iminutes) > /tmp/log
        echo Maayan Mashhadi, Ori Braverman >> /tmp/log
    - name: Checkout
      uses: actions/checkout@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_COURSE_USERNAME }}
        password: ${{ secrets.DOCKER_COURSE_PASSWORD }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and export
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        tags: ${{ secrets.DOCKER_COURSE_USERNAME }}/server-v2:latest
        outputs: type=docker,dest=/tmp/image.tar
    - name: check if image.tar is in tmp folder
      run: ls /tmp
    - name: update log file on success
      if: success()
      run: echo image successfully built >> /tmp/log
    - name: update log file on fail
      if: failure()
      run: echo image not able to be built >> /tmp/log
    - name: Upload server image artifact
      uses: actions/upload-artifact@v3
      with:
        name: image
        path: /tmp/image.tar
    - name: Always upload log file
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: log
        path: /tmp/log
   
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
#    1. download image and run it in a container
    - name: Download image artifact
      uses: actions/download-artifact@v3
      with:
        name: image
        path: /tmp
    - name: Download log artifact
      uses: actions/download-artifact@v3
      with:
        name: log
        path: /tmp 
    - name: list /tmp and cat log
      run: |
        ls /tmp
        cat /tmp/log
    - name: Load Docker images from previous workflows
      run: docker load --input /tmp/image.tar
    - name: check server image is loded
      run: docker image ls
    - name: run image in container
      run: docker run -p8000:8000 ${{ secrets.DOCKER_COURSE_USERNAME }}/server-v2 &
    - name: update log file on success
      if: success()
      run: echo Container up and running >> /tmp/log
    - name: update log file on fail
      if: failure()
      run: echo Container failed to run >> /tmp/log
    - name: Check container is running
      run: docker ps
#     2. set up python and pytest environment
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest # not using yet lint checker like ruff
        pip install requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#      3. run pytest tests and check result
    - name: Test with pytest  # additionally use ruff or other lint checkers
      run: |
        cd tests
        pytest -v assn3_tests.py > assn3_test_results.txt
    - name: update test_results file on success
      if: success()
      run: echo tests succeeded >> /tmp/log
    - name: update test_results file on fail
      if: failure()
      run: echo tests failed >> /tmp/log
    - name: upload test results
      if: always() 
      uses: actions/upload-artifact@v3
      with:
        name: assn3_test_results
        path: tests/assn3_test_results.txt
    - name: Always upload log file
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: log
        path: /tmp/log
        
  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download image artifact
      uses: actions/download-artifact@v3
      with:
        name: image
        path: /tmp
    - name: Load Docker images from previous workflows
      run: docker load --input /tmp/image.tar
    - name: run image in container
      run: docker run -p8000:8000 ${{ secrets.DOCKER_COURSE_USERNAME }}/server-v2 &
    - name: read query.txt
      run: python query-job.py
    - name: Always upload response file
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: response
        path: /tmp/response.txt
    
    
